package com.example.spider.controllers;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;
import org.springframework.util.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.example.spider.models.Category;
import com.example.spider.models.Product;
import com.example.spider.models.User;
import com.example.spider.services.projectService;

import antlr.StringUtils;


@Controller
public class projectController {
	private final projectService ps;
		
		public projectController(projectService ps) {
			this.ps = ps;
		}
	@RequestMapping("/")
		 public String index(Model model) {
				return "home.jsp";
		 }
	@RequestMapping("/login")
	 public String login(@ModelAttribute("user") User user) {
			return "login.jsp";
	 }
	@RequestMapping("/register")
	 public String register(@ModelAttribute("user") User user) {
			return "register.jsp";
	 }
	 @RequestMapping(value="/registration", method=RequestMethod.POST)
	    public String registerUser(@Valid @ModelAttribute("user") User user, BindingResult result, HttpSession session) {
	        if(result.hasErrors()) {
	            return "registrationPage.jsp";
	        }
	        ps.registerUser(user);
	        return "redirect:/login";
	    }
	 @RequestMapping(value="/login", method=RequestMethod.POST)
	    public String loginUser(@RequestParam("email") String email, @RequestParam("password") String password, Model model, HttpSession session) {
	        // if the user is authenticated, save their user id in session
	        // else, add error messages and return the login page
	    	if(ps.authenticateUser(email, password)==true) {
	    		User user=ps.findByEmail(email);
	    		session.setAttribute("user.id", user.getId());
	    		session.setAttribute("role", user.getRole().getId());
	    		return "redirect:/";	
	    	}
	    	else {
	    		return "redirect:/login";
	    	}
	    }
	 @RequestMapping(value="/logout")
	 public String logout(HttpSession session,Model model) {
		  session.invalidate();
		  return "redirect:/";
	 }
	 @RequestMapping("/admin")
	 public String admin(HttpSession session,Model model) {
		 Long id=(Long)session.getAttribute("user.id");
			if (id == null ) {
				return "redirect:/login";
			}
			User user=ps.findUserById(id);
			if(user.getRole().getId() != 1) {
				return "redirect:/";
			}
			
			List <Product> prods=ps.allproducts();
			model.addAttribute("prods",prods);
			return "adminOneScreen.jsp";
	 }
	


	 @RequestMapping(value="/adminprod/delete/{id}")
	 public String destroy(@PathVariable("id")Long id) {
		ps.deleteprod(id);
	 	return"redirect:/admin/products";
	 }
	 @RequestMapping("/admin/createform")
	 public String addapp(@ModelAttribute ("Product") Product Product,Model model) {	
		 List <Category> x=projectService.allcats();
	    	model.addAttribute("x",x);
		 return "addapp.jsp";
		 
	 }

	 @RequestMapping(value="/addapp",method=RequestMethod.POST)
	  public String addapp(@Valid @ModelAttribute("Product") Product Product, BindingResult result,HttpSession session,@RequestParam("Image") MultipartFile multipartFile) throws IOException {
		 String fileName = StringUtils.cleanPath(multipartFile.getOriginalFilename());
		 Product.setImage(fileName);
 	  	 ps.createprod(Product);
         User savedUser=ps.findUserById((Long)session.getAttribute("user.id"));
         String uploadDir = "user-photos/" + savedUser.getId();
         FileUploadUtil.saveFile(uploadDir, fileName, multipartFile);
		 return "redirect:/";
 
	 }
	 @RequestMapping("/adminprod/update/{id}")
	 public String updateform(@PathVariable("id") Long id,Model model) {	 
		 Product x=projectService.findProductById(id);
		 model.addAttribute("x",x);
		 List <Category> g=projectService.allcats();
	    	model.addAttribute("g",g);
		 return "edit.jsp";
		 
	 }
	 @RequestMapping(value="/updateprod/{id}",method=RequestMethod.POST)
	  public String updateprod(@Valid @ModelAttribute("Product") Product Product, BindingResult result) throws IOException { 
		 if (result.hasErrors()) {
	            return "/edit.jsp";
	        } else {
	        	ps.updateprod(Product);
	        	return "redirect:/admin/products";	
	        }
	 }
}
